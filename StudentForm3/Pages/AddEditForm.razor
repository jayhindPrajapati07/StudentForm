@page "/AddEdit"
@page "/AddEdit/{editMode:bool}/{id:int}"
@inject IJSRuntime JSRuntime
<div class="main-container1">

    <div class="formLayout" style="font-family:@(layout.fontFamily);font-size:@FontSize">
        <h1>@StudentHeader</h1>
        <form id="form" class="form">
            <div class="inputs">
                <label for="firstName">@(layout.FirstNameLabel)<span>@(layout.stars)</span></label>
                <div>
                    <input type="text" @bind="studentModel.FirstName" maxlength="50" name="firstName" id="firstName" placeholder="Please enter First Name" oninput="this.value = this.value.replace(/[^A-Za-z\s]/g, '');">
                    <label class="fname-err error">@studentModel.errFirstName</label>
                </div>
            </div>
            <div class="inputs">
                <label for="lastName">@(layout.LastNameLabel) <span>@(layout.stars)</span></label>
                <div class="col-sm-9">
                    <input type="text" @bind="studentModel.LastName" maxlength="50" name="lastName" id="lastName" placeholder="Please enter Last Name" oninput="this.value = this.value.replace(/[^A-Za-z\s]/g, '');">
                    <label class="lname-err error">@studentModel.errLastName</label>
                </div>
            </div>
            <div class="inputs">
                <label for="gender">@(layout.GenderLabel) <span>@(layout.stars)</span></label>
                <div>
                    <select class="selectGender" @bind="studentModel.GenderIndex" aria-label="Default select example" name="genderIndex" id="gender" >
                        
                        <option value="-1" >Select Gender</option>
                        <option value="0" >Male</option>
                        <option value="1" >Female</option>
                    </select>
                    <label class="gender-err error">@studentModel.errGender</label>
                </div>
            </div>
            <div class="input-group">
                <div class="input-group-1">
                    <label for="dateOfBirth" class="dob-label">@(layout.DateOfBirthLabel) <span>@(layout.stars)</span></label>
                    <div class="dob">
                        <input type="date" @bind="studentModel.DateOfBirth" @oninput="SetAge" class="date-of-birth" name="dateOfBirth" id="dateOfBirth" min="1923-01-01" max="@DateTime.Now.Date" onkeydown="return false">
                        <label class="dob-err error">@studentModel.errDateOfBirth</label>
                    </div>
                </div>
                <div class="input-group-2">
                    <label for="age">@(layout.AgeLabel) <span>@(layout.stars)</span></label>
                    <div>
                        <div>
                            <input type="text" @bind="studentModel.Age" @oninput="setDateOfBirth" maxlength="2" class="age" name="age" id="age" onkeyup="this.value = this.value.replace(/[^0-9]/g, ''); if (this.value > 99) this.value = '99';">
                            <span>years</span>
                        </div>
                        <label class="age-err error">@studentModel.errAge</label>
                    </div>
                </div>
            </div>
            <div class="inputs">
                <label for="class">@(layout.ClassLabel)</label>
                <div class="col-sm-4 px-1 ms-2">
                    <input type="text" @bind="studentModel.Class" name="class" maxlength="50" id="class" placeholder="Please enter class">
                </div>
            </div>
            <div class="inputs">
                <label for="address">@(layout.AddressLabel)</label>
                <div>
                    <textarea @bind="studentModel.Address" name="address" maxlength="100" id="address" class="address" rows="3" placeholder="Please enter address"></textarea>
                </div>
            </div>

            <div class="button-group">
                <div class="btn-1">
                    <button type="button" @onclick="DeleteData" name="action" value="Delete" id="deleteBtn" class="@hideDeleteButton">@(layout.deleteBtnText)</button>
                </div>
                <div class="btn-2">
                    <button type="button" @onclick="SaveData" name="action" value="Save" id="saveBtn">@(layout.saveBtnText)</button>
                    <NavLink href="/" class="btn btn-secondary ">@(layout.cancelBtnText)</NavLink>
                </div>
            </div>
        </form>
    </div>
</div>

 
    @code {
    [Parameter] public bool editMode { get; set; } = false;
    [Parameter] public int Id { get; set; } = 0;
    //---//
    public string StudentHeader { get; set; }
    public string hideDeleteButton { get; set; } = "hide";
    public string FontSize { get; set; } = "18px";
    Layout layout = new Layout();

    StudentModel studentModel = new StudentModel();

    protected override void OnInitialized()
    {

        FontSize = layout.fontSize + "px";
        if (editMode == true)
        {
            StudentHeader=layout.EditStudentHeader;
            hideDeleteButton = "";
            getSelectedStudentData(Id);
        }
        else
        {
            StudentHeader = layout.AddStudentHeader;
            hideDeleteButton = "hide";
            studentModel.GenderIndex = -1;
            studentModel.DateOfBirth = DateTime.Now.Date;
        }
    }

    private void getSelectedStudentData(int Id)
    {
        DataLayer data = new DataLayer();
        int id = data.getStudentById(Id);
        if (id >= 0)
        {
            string[] selectedStudent = DataLayer.studentList[id];
            studentModel.FirstName = selectedStudent[1];
            studentModel.LastName = selectedStudent[2];
            studentModel.GenderIndex = int.Parse(selectedStudent[8]);
            string age = selectedStudent[4];
            age = age.Split(" ")[0];
            studentModel.Age = int.Parse(age);
            studentModel.DateOfBirth = Convert.ToDateTime(selectedStudent[7]);
            studentModel.Class = selectedStudent[5];
            studentModel.Address = selectedStudent[6];
        }

    }

    private void SaveData()
    {
        DataLayer dataLayer = new DataLayer();
        dataLayer.setStudentModel(studentModel);
        studentModel.FirstName = studentModel.FirstName?.Trim();
        studentModel.LastName = studentModel.LastName?.Trim();
        int genderIndex = studentModel.GenderIndex;
        studentModel.Gender = genderIndex == 0 ? "Male" : "Female"; 
        string dob = studentModel.DateOfBirth.ToString();
        string age = studentModel.Age.ToString();
        studentModel.Class = studentModel.Class?.Trim();
        studentModel.Address = studentModel.Address?.Trim();
        bool isValidated = validateData(studentModel.FirstName, studentModel.LastName, genderIndex, dob, age);
        if (isValidated)
        {
            if (!editMode)
            {
                dataLayer.AddData();//Add
                navigationManager.NavigateTo("/");
            }
            else
            {
                dataLayer.UpdateData(Id);//Update
                navigationManager.NavigateTo("/");
            }
        }
    }
    
    private async Task DeleteData()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this student record?");
        if (confirmed)
        {
            DataLayer dataLayer = new DataLayer();
            dataLayer.setStudentModel(studentModel);
            dataLayer.DeleteData(Id);
            navigationManager.NavigateTo("/");
        }
    }

    private bool validateData(string firstName, string lastName, int genderIndex, string dob, string age)
    {
        bool isValid = true;
        string requiredMessage = layout.requiredMessage;
        if (string.IsNullOrEmpty(firstName))
        {
            studentModel.errFirstName = requiredMessage;
            isValid = false;
        }
        else if (firstName.Length > 15 || firstName.Length < 3)
        {
            studentModel.errFirstName = layout.firstNameSpError;
            isValid = false;
        }
        else
        {
            studentModel.errFirstName = "";
        }

        if (string.IsNullOrEmpty(lastName))
        {
            studentModel.errLastName = requiredMessage;
            isValid = false;
        }
        else if (lastName.Length > 18 || lastName.Length < 2)
        {
            studentModel.errLastName = layout.lastNameSpError;
            isValid = false;
        }
        else
        {
            studentModel.errLastName = "";
        }

        if (genderIndex == -1)
        {
            studentModel.errGender = requiredMessage;
            isValid = false;
        }
        else
        {
            studentModel.errGender = "";
        }

        if (dob == DateTime.Now.Date.ToString())
        {
            studentModel.errDateOfBirth = requiredMessage;
            isValid = false;
        }
        else
        {
            studentModel.errDateOfBirth = "";
        }

        if (int.Parse(age) == 0)
        {
            studentModel.errAge = requiredMessage;
            isValid = false;
        }
        else if (int.Parse(age) > 99 || int.Parse(age) < 5)
        {
            studentModel.errAge = layout.ageSpError;
            isValid = false;
        }
        else
        {
            studentModel.errAge = "";
        }
        return isValid;
    }

    //Set dateOfBirth from Age
    private void SetAge(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out DateTime dateOfBirth))
        {
            studentModel.Age = DateTime.Now.Year - dateOfBirth.Year;
        }
    }
    //Set  Age from dateOfBirth
    private void setDateOfBirth(ChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            studentModel.DateOfBirth = DateTime.Now.Date;
        }

        else if (int.TryParse(e.Value.ToString(), out int age))
        {
            studentModel.DateOfBirth = DateTime.Now.AddYears(-age);
        }
    }

}
